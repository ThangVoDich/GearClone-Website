const Order = require("../models/Order");
const User = require("../models/User");
const Product = require("../models/Product");
// üì¶ L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
const getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find().sort({ createdAt: -1 });
    res.json(orders);
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng: " + err.message });
  }
};

const updateOrderStatus = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id);
    if (!order) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    if (req.body.status) order.status = req.body.status;

    if (typeof req.body.isPaid === "boolean") {
      order.isPaid = req.body.isPaid;
      order.paidAt = req.body.isPaid ? Date.now() : null;
    }

    await order.save();
    res.json({ message: "C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng", order });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng: " + err.message });
  }
};

const deleteOrder = async (req, res) => {
  try {
    const order = await Order.findByIdAndDelete(req.params.id);
    if (!order) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    res.json({ message: "ƒê√£ xo√° ƒë∆°n h√†ng th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi xo√° ƒë∆°n h√†ng: " + err.message });
  }
};

const getOrderById = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id).populate("user", "name email");
    if (!order) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    res.json(order);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y ƒë∆°n h√†ng: " + err.message });
  }
};

// üë§ L·∫•y danh s√°ch ng∆∞·ªùi d√πng
const getAllUsers = async (req, res) => {
  try {
    const users = await User.find(); // C√≥ th·ªÉ th√™m .select("-password") n·∫øu c·∫ßn b·∫£o m·∫≠t
    res.json(users);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y ng∆∞·ªùi d√πng:", err);
    res.status(500).json({ message: "L·ªói khi l·∫•y ng∆∞·ªùi d√πng: " + err.message });
  }
};

const deleteUser = async (req, res) => {
  try {
    const user = await User.findByIdAndDelete(req.params.id);
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    res.json({ message: "ƒê√£ xo√° ng∆∞·ªùi d√πng th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói xo√° user: " + err.message });
  }
};

const updateUserRole = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });

    user.isAdmin = req.body.isAdmin;
    await user.save();

    res.json({ message: "C·∫≠p nh·∫≠t quy·ªÅn th√†nh c√¥ng", isAdmin: user.isAdmin });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t quy·ªÅn: " + err.message });
  }
};


const getAllProducts = async (req, res) => {
  try {
    const products = await Product.find();
    res.json(products);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y s·∫£n ph·∫©m: " + err.message });
  }
};

const deleteProduct = async (req, res) => {
  try {
    const product = await Product.findByIdAndDelete(req.params.id);
    if (!product) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    res.json({ message: "ƒê√£ xo√° s·∫£n ph·∫©m" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói xo√° s·∫£n ph·∫©m: " + err.message });
  }
};
const createProduct = async (req, res) => {
  const { name, price, category, subcategory, image, description } = req.body;
  try {
    const product = await Product.create({ name, price, category, subcategory, image, description });
    res.status(201).json(product);
  } catch (err) {
    res.status(500).json({ message: "L·ªói t·∫°o s·∫£n ph·∫©m: " + err.message });
  }
};

const updateProduct = async (req, res) => {
  try {
    const product = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!product) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    res.json(product);
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m: " + err.message });
  }
};


// ‚úÖ Export duy nh·∫•t 1 l·∫ßn
module.exports = {
  getAllOrders,
  updateOrderStatus,
  deleteOrder,
  getOrderById,
  getAllUsers,
  deleteUser,
  updateUserRole,
  getAllProducts,
  deleteProduct,
  createProduct,
  updateProduct
};
